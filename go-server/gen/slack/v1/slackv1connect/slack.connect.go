// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: slack/v1/slack.proto

package slackv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "example/gen/slack/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// SlackServiceName is the fully-qualified name of the SlackService service.
	SlackServiceName = "slack.v1.SlackService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SlackServicePostMessageProcedure is the fully-qualified name of the SlackService's PostMessage
	// RPC.
	SlackServicePostMessageProcedure = "/slack.v1.SlackService/PostMessage"
)

// SlackServiceClient is a client for the slack.v1.SlackService service.
type SlackServiceClient interface {
	PostMessage(context.Context, *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.PostMessageResponse], error)
}

// NewSlackServiceClient constructs a client for the slack.v1.SlackService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSlackServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SlackServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &slackServiceClient{
		postMessage: connect.NewClient[v1.PostMessageRequest, v1.PostMessageResponse](
			httpClient,
			baseURL+SlackServicePostMessageProcedure,
			opts...,
		),
	}
}

// slackServiceClient implements SlackServiceClient.
type slackServiceClient struct {
	postMessage *connect.Client[v1.PostMessageRequest, v1.PostMessageResponse]
}

// PostMessage calls slack.v1.SlackService.PostMessage.
func (c *slackServiceClient) PostMessage(ctx context.Context, req *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.PostMessageResponse], error) {
	return c.postMessage.CallUnary(ctx, req)
}

// SlackServiceHandler is an implementation of the slack.v1.SlackService service.
type SlackServiceHandler interface {
	PostMessage(context.Context, *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.PostMessageResponse], error)
}

// NewSlackServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSlackServiceHandler(svc SlackServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	slackServicePostMessageHandler := connect.NewUnaryHandler(
		SlackServicePostMessageProcedure,
		svc.PostMessage,
		opts...,
	)
	return "/slack.v1.SlackService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SlackServicePostMessageProcedure:
			slackServicePostMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSlackServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSlackServiceHandler struct{}

func (UnimplementedSlackServiceHandler) PostMessage(context.Context, *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.PostMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("slack.v1.SlackService.PostMessage is not implemented"))
}
