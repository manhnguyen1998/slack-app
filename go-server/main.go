package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"github.com/rs/cors"
	"github.com/slack-go/slack"

	slackv1 "example/gen/slack/v1"        // generated by protoc-gen-go
	"example/gen/slack/v1/slackv1connect" // generated by protoc-gen-connect-go
)

type SlackServer struct{}

func (s *SlackServer) PostMessage(
	ctx context.Context,
	req *connect.Request[slackv1.PostMessageRequest],
) (*connect.Response[slackv1.PostMessageResponse], error) {
	log.Println("Request headers: ", req.Header())

	// Call Slack api
	api := slack.New(os.Getenv("TOKEN"))

	res1, res2, err := api.PostMessage(os.Getenv("CHANNEL_ID"), slack.MsgOptionText(req.Msg.Message, false))
	if err != nil {
		fmt.Printf("%s\n", err)
		res := connect.NewResponse(&slackv1.PostMessageResponse{
			Message: fmt.Sprintf("Error on calling slack api, %s!", err),
		})

		return res, nil
	}

	fmt.Printf("ID: %s, Fullname: %s", res1, res2)

	// response to rpc caller
	res := connect.NewResponse(&slackv1.PostMessageResponse{
		Message: fmt.Sprintf("Sending message successfully, %s!", req.Msg.Message),
	})
	res.Header().Set("Slack-Version", "v1")
	return res, nil
}

func main() {
	slack_server := &SlackServer{}
	mux := http.NewServeMux()
	mux.Handle(slackv1connect.NewSlackServiceHandler(slack_server))

	corsHandler := cors.New(cors.Options{
    AllowedMethods: []string{
        http.MethodGet,
        http.MethodPost,
    },
    AllowedOrigins: []string{"http://127.0.0.1:5173"},
    AllowedHeaders: []string{
        "Accept-Encoding",
        "Content-Encoding",
        "Content-Type",
        "Connect-Protocol-Version",
        "Connect-Timeout-Ms",
        "Connect-Accept-Encoding",  // Unused in web browsers, but added for future-proofing
        "Connect-Content-Encoding", // Unused in web browsers, but added for future-proofing
        "Grpc-Timeout",             // Used for gRPC-web
        "X-Grpc-Web",               // Used for gRPC-web
        "X-User-Agent",             // Used for gRPC-web
				"X-Custom-Header",
    },
    ExposedHeaders: []string{
        "Content-Encoding",         // Unused in web browsers, but added for future-proofing
        "Connect-Content-Encoding", // Unused in web browsers, but added for future-proofing
        "Grpc-Status",              // Required for gRPC-web
        "Grpc-Message",             // Required for gRPC-web
    },
	})

	handler := corsHandler.Handler(mux)
	err := http.ListenAndServe(
		":8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(handler, &http2.Server{}),
	)
	if err != nil {
		fmt.Println("Server error", err)
	}
}
