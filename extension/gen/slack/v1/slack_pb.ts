// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file slack/v1/slack.proto (package slack.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message slack.v1.PostMessageRequest
 */
export class PostMessageRequest extends Message<PostMessageRequest> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<PostMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slack.v1.PostMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostMessageRequest {
    return new PostMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostMessageRequest {
    return new PostMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostMessageRequest {
    return new PostMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostMessageRequest | PlainMessage<PostMessageRequest> | undefined, b: PostMessageRequest | PlainMessage<PostMessageRequest> | undefined): boolean {
    return proto3.util.equals(PostMessageRequest, a, b);
  }
}

/**
 * @generated from message slack.v1.PostMessageResponse
 */
export class PostMessageResponse extends Message<PostMessageResponse> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<PostMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slack.v1.PostMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostMessageResponse {
    return new PostMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostMessageResponse {
    return new PostMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostMessageResponse {
    return new PostMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostMessageResponse | PlainMessage<PostMessageResponse> | undefined, b: PostMessageResponse | PlainMessage<PostMessageResponse> | undefined): boolean {
    return proto3.util.equals(PostMessageResponse, a, b);
  }
}

